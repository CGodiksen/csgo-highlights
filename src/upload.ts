import fs from "fs";
import path from "path";
import { google, Auth } from 'googleapis';
import { authenticate } from '@google-cloud/local-auth';
import { FullMatch } from "hltv/lib/models/FullMatch";

// initialize the Youtube API library
const youtube = google.youtube('v3');

interface Metadata {
    title: string;
    description: string;
    tags: string[];
}

interface OAuthKey {
    web: {
        client_id: string;
        client_secret: string;
        redirect_uris: string[];
    }
}

const uploadHighlightVideo = async (videoPath: string, match: FullMatch): Promise<void> => {
    const metadata = createMetadata(match);

    try {
        await upload(videoPath, metadata);
        console.log(`"Uploaded" the highlight video at ${videoPath} to Youtube`);
    } catch (uploadError) {
        console.error(uploadError);
    }
};

const createMetadata = (match: FullMatch): Metadata => {
    const title = `${match.team1!.name} vs ${match.team2!.name} - ${match.event.name}`;
    const description = `Autogenerated CSGO highlights.\nPlease comment down below if you have any suggestions for improvements.`;
    const tags = ["csgo highlights", "csgo pro", "twitch highlights", "csgo vod", "counter strike", "global offensive",
        match.team1!.name, match.team2!.name, match.event.name, match.date.toString()];

    return { title: title, description: description, tags: tags };
};

// Upload the given video to Youtube using an OAuth2 client.
const upload = async (filePath: string, metadata: Metadata): Promise<void> => {
    const auth = await getOAuth2Client();
    google.options({ auth });

    const res = await youtube.videos.insert(
        {
            part: ['id,snippet,status'],
            notifySubscribers: false,
            requestBody: {
                snippet: {
                    title: metadata.title,
                    description: metadata.description,
                    categoryId: "20", // Setting the category to "gaming".
                    tags: metadata.tags
                },
                status: {
                    privacyStatus: 'private',
                },
            },
            media: {
                body: fs.createReadStream(filePath),
            },
        }
    );
    console.log(res.data);
};

const getOAuth2Client = async (): Promise<Auth.OAuth2Client> => {
    const credentialsPath = "config/credentials.json";
    const oAuthKeyPath = "config/oauth_key.json";

    // If credentials are already saved then use them, otherwise create new credentials by requesting access from the user.
    if (fs.existsSync(credentialsPath)) {
        const oAuthKey = JSON.parse(fs.readFileSync(oAuthKeyPath).toString()) as OAuthKey;
        const auth = new google.auth.OAuth2(oAuthKey.web.client_id, oAuthKey.web.client_secret, oAuthKey.web.redirect_uris[0]);

        const credentials = JSON.parse(fs.readFileSync(credentialsPath).toString()) as Auth.Credentials;
        auth.setCredentials(credentials);

        return auth;
    } else {
        return await createNewCredentials(oAuthKeyPath, credentialsPath);
    }
};

// Creating new OAuth2 access credentials and saving them to the given credentials path.
const createNewCredentials = async (oAuthKeyPath: string, credentialsPath: string): Promise<Auth.OAuth2Client> => {
    const auth = await authenticate({
        keyfilePath: path.join(__dirname, `../${oAuthKeyPath}`),
        scopes: [
            'https://www.googleapis.com/auth/youtube.upload',
            'https://www.googleapis.com/auth/youtube',
        ],
    });

    fs.writeFileSync(credentialsPath, JSON.stringify(auth.credentials));
    return auth;
};

export { uploadHighlightVideo };